#!/usr/bin/env ruby

require 'yaml'

require File.join(File.dirname(__FILE__), '../lib/librato/metrics/taps')
include Librato::Metrics

def err(msg)
  $stderr.puts msg
  exit 1
end

def get_beans(bean_name)
  beans = Taps::JMX::match_beans(bean_name)
  unless beans && beans.length > 0
    err "No beans match: #{bean_name}"
  end
  beans
end

def match_beans(opts)
  ret = Taps::JMX::connect!(opts[:jmx_host], opts[:jmx_port])
  unless ret
    err "Failed to connect to JMX endpoint"
  end

  unless opts[:bean_name]
    err "Must specify --bean-name when matching bean names"
  end

  beans = get_beans(opts[:bean_name])
  puts beans.join("\n")
end

def publish_beans(publisher, beans, opts)
  (counters, gauges) = Taps::JMX::retrieve(beans, opts[:ignore_missing])

  r = publisher.post(counters, gauges, opts)
  unless r
    $stderr.puts "ERROR: Failed to publish metrics!"
  end
  return r
end

opts = Trollop::options do
  version "Version: #{Taps::version}"
  banner <<EOS
Librato Metrics Tap for JMX Beans
Version: #{Taps::version}

Usage: librato-metrics-tap-jmxbeans <options>

Options:
EOS
  # JMX End point
  opt :jmx_host, "JMX Hostname", :short => "-j", :default => "localhost"
  opt :jmx_port, "JMX Port", :short => "-m", :default => 8080
  opt :jmx_username, "JMX Username", :short => "-x", :type => :string
  opt :jmx_password, "JMX Password", :short => "-w", :type => :string

  opt :email, "Metrics Email address", :short => "-e", :type => :string
  opt :token, "Metrics API token", :short => "-t", :type => :string
  opt :source, "Optional source name", :short => "-s", :type => :string
  opt :prefix, "Optional prefix name", :short => "-z", :type => :string

  opt :measure_time, "Optional time for measurements", :short => "-a", :type => :int
  opt :metrics_url, "Metrics URL", :short => "-r", :default => 'https://metrics-api.librato.com'

  opt :interval, "Run as a daemon and poll every N seconds", :short => "-i", :type => :int

  opt :ignore_missing, "Ignore missing beans/attributes", :short => "-g"

  # Bean collection options
  opt :data_file_full, "YAML file defining beans & attribute names", :short => "-d", :type => :string
  opt :data_file_attributes, "YAML file of bean attributes", :short => "-f", :type => :string
  opt :bean_name, "Bean name to match against or lookup", :short => "-b", :type => :string

  # Commands
  opt :publish, "Publish Bean Attributes to Librato Metrics", :short => "-p"
  opt :match_beans, "Output beans that match --bean-name regexp", :short => "-c"

end

if opts[:publish] && opts[:match_beans]
  err "Only specify one command"
end

unless opts[:publish] || opts[:match_beans]
  err "Must specify a command"
end

if opts[:publish]
  unless opts[:email]
    err "Must provide email to publish"
  end

  unless opts[:token]
    err "Must provide token to publish"
  end
end

if opts[:match_beans]
  match_beans(opts)
  exit 0
end

#
# Publishing. Read beans + attributes then push to Metrics
#

publisher = Taps::Publisher.new(opts)

ret = Taps::JMX::connect!(opts[:jmx_host], opts[:jmx_port], opts[:jmx_username], opts[:jmx_password])
unless ret
  err "Failed to connect to JMX endpoint"
end

# Load full definition
#
if opts[:data_file_full]
  filename = opts[:data_file_full]
  begin
    beanf = File.open(filename, "r")
  rescue => err
    puts "Failed to open bean file #{filename}: #{err.message}"
    exit 1
  end

  begin
    beans = YAML::load(beanf)
  rescue => err
    puts "Failed to parse #{filename}: #{err.message}"
    exit 1
  end
  beanf.close
elsif opts[:bean_name] && opts[:data_file_attributes]
  # Load attributes from file
  #
  filename = opts[:data_file_attributes]
  begin
    beanf = File.open(filename, "r")
  rescue => err
    puts "Failed to open attributes file #{filename}: #{err.message}"
    exit 1
  end

  begin
    attrs = YAML::load(beanf)
  rescue => err
    puts "Failed to parse #{filename}: #{err.message}"
    exit 1
  end
  beanf.close

  beans = {}
  beannames = get_beans(opts[:bean_name])
  beannames.each do |name|
    beans[name] = attrs
  end
else
  err "Must specify --data-file-full or --data-file-attributes"
end

unless opts[:interval]
  r = publish_beans(publisher, beans, opts)
  exit(r ? 0 : 1)
end

# If --interval has been specified, broadcast every interval
# seconds. We wait for interval seconds each time to ensure we
# broadcast on the interval
begin
  t = Time.now.tv_sec
  t2 = ((t + opts[:interval] + 1) / opts[:interval]) * opts[:interval]

  sleep (t2 - t)
  t = Time.now
  tsecs = (Time.now.tv_sec / opts[:interval]) * opts[:interval]
  publish_beans(publisher, beans, opts.merge(:measure_time => tsecs))
end while true

exit 1

# Local Variables:
# mode: ruby
# End:
